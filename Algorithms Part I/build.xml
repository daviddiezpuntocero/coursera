<project default="help" basedir=".">

    <!-- Package name, will be used when generating the zip file --> 
    <property name = "assemble.package.name"          value = "yum-workflow-integration"/>
    <!-- Version of the package, will be used when generating the zip file-->
    <property name = "assemble.package.version"       value = "0.1"/>

    <!-- Your sourcing application installation directory-->
    <property name = "application.server.path"        value = "D:/Dev/sourcing/8_0_1_5_98/"/>

    <!-- Your sourcing application log directory, used to backup old logs-->
    <property name = "application.server.log.file"    value = "${application.server.path}/log/epass/MyServer/MyServer_out.log"/>

    <!-- Sourcing application windows service name -->
    <property name = "application.service.name"       value = "Sourcing"/>

    <!-- File to be exclued when compiling -->
    <property name = "build.production.src.exclude"   value = "InternalUserIPCheckPostProcessor.java"/>    

    <!-- Whether to backup zip file and the bat file when deploying-->
    <property name = "application.deploy.backup"      value = "false"/>

    <property name = "application.server.lib.path"    value = "${application.server.path}/lib"/>
    <property name = "tools"                       location = "tools"/>
    <property name = "findbugs.home"               location = "${tools}/findbugs"/>
    <property name = "cobertura.home"              location = "${tools}/cobertura"/>
    <property name = "jetty.home"                  location = "${tools}/jetty"/>
    <property name = "junit.home"                  location = "${tools}/junit"/>
    <property name = "pmd.home"                    location = "${tools}/pmd"/>
    <property name = "ant-contrib.home"            location = "${tools}/ant-contrib"/>
    <property name = "common.lib.dir"              location = "lib"/>

    <property name = "target"                      location = "target"/>

    <property name = "build.production.src"        location = "work/src"/>
    <property name = "build.test.src"              location = "work/test/src"/>
    <property name = "build.test.data"             location = "work/test/data"/>

    <property name = "build.production.classes"    location = "${target}/classes/production"/>
    <property name = "build.test.classes"          location = "${target}/classes/test"/>
    <property name = "build.test.tmp"              location = "${target}/tmp"/>
    <property name = "build.instrument.classes"    location = "${target}/classes/instrument"/>

    <property name = "data"                        location = "${target}/data"/>
    <property name = "reports.junit.data"          location = "${data}/junit"/>
    <property name = "reports.codeCoverage.data"   location = "${data}/codeCoverage"/>
    <property name = "reports.findbugs.data"       location = "${data}/findbugs"/>
    <property name = "reports.pmd.data"            location = "${data}/pmd"/>
    <property name = "reports.pmd.config"          location = "${pmd.home}/etc/xslt"/>
    <property name = "report.pmd.file.name"           value = "report_pmd"/>

    <property name = "reports"                     location = "${target}/reports"/>
    <property name = "reports.junit.report"        location = "${reports}/junit"/>
    <property name = "reports.codeCoverage.report" location = "${reports}/codeCoverage"/>
    <property name = "reports.findbugs.report"     location = "${reports}/findbugs"/>
    <property name = "reports.pmd.report"          location = "${reports}/pmd"/>

    <property name = "docs"                        location = "${target}/docs"/>
    <property name = "docs.javadoc"                location = "${docs}/javadoc"/>

    <property name = "assemble.files.path"         location = "work/app"/>
    <property name = "assemble.path"               location = "${target}/assemble"/>
    <property name = "assemble.path.lib"           location = "${assemble.path}/lib"/>

    <path id="cobertura.classpath">
        <fileset dir="${cobertura.home}">
            <include name="cobertura.jar" />
            <include name="lib/**/*.jar" />
        </fileset>
    </path>

    <path id="common.classpath">
        <fileset dir="${common.lib.dir}">
            <include name="*.jar"/>
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="junit.classpath">
        <fileset dir="${junit.home}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="jetty.classpath">
        <fileset dir="${jetty.home}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="findbugs.classpath">
        <fileset dir="${findbugs.home}">
            <include name="lib/*.jar"/>
        </fileset>
    </path>

    <path id="pmd.classpath">
        <fileset dir="${pmd.home}">
            <include name="lib/*.jar"/>
        </fileset>
    </path>

    <path id="ant-contrib.classpath">
        <fileset dir="${ant-contrib.home}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${ant-contrib.home}">
            <include name="lib/*.jar"/>
        </fileset>
    </path>

    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.classpath"/>
    <taskdef resource="tasks.properties" classpathref="cobertura.classpath"/>
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="ant-contrib.classpath"/>

    <target name="help">
        <echo>--------------- Usage for this build system -------------</echo>
        <echo>[ant help] display help information(you are actually doing this now)</echo>
        <echo>[ant compile] compile the source code</echo>
        <echo>[ant junit:compile] compile test cases</echo>
        <echo>[ant junit:run] run test cases</echo>
        <echo>[ant junit:report] generate junit reports</echo>
        <echo>[ant cc:instrument] generate code coverage instrument classes</echo>
        <echo>[ant cc:report] generate code coverage report</echo>
        <echo>[ant findbugs] invoke find bugs and generate corresponding report</echo>
        <echo>[ant reportall] generate reports including code coverage, unit test and find bug</echo>
        <echo>[ant docs:javadoc] generate javadoc for the source code</echo>
        <echo>[ant tags] generate ctags and cscope tags for the source code</echo>
        <echo>[ant run -Dc=xxx] Run class xxx(inlcud full package name)</echo>
        <echo>[ant assemble] Assemble all necessary files to a deployable package</echo>
        <echo>[ant deploy] Deploy assembled package to a local application server</echo>
        <echo>[ant clean] clean target files, including generated reports!</echo>
        <echo></echo>
        <echo>Note: Default target is help</echo>
        <echo>----------------------- End of usage ---------------------</echo>
        <echo>Author: Xiangqian.Liu&lt;smartlitchi@gmail.com&gt;</echo>
        <echo>You may dispatch and modify this build system for free</echo>
    </target>

    <target name="init">
        <mkdir dir="${build.production.classes}"/>
        <mkdir dir="${build.instrument.classes}"/>
        <mkdir dir="${reports.codeCoverage.data}"/>
        <mkdir dir="${reports.codeCoverage.report}"/>
        <mkdir dir="${build.test.classes}"/>
        <mkdir dir="${build.test.tmp}"/>
        <mkdir dir="${reports.junit.data}"/>
        <mkdir dir="${reports.junit.report}"/>
        <mkdir dir="${reports.findbugs.report}"/>
        <mkdir dir="${reports.pmd.data}"/>
        <mkdir dir="${reports.pmd.report}"/>
        <mkdir dir="${docs.javadoc}"/>
        <mkdir dir="${assemble.path}"/>
        <mkdir dir="${assemble.path.lib}"/>        
    </target>
    <target name="compile" depends="init">
      <javac
          srcdir            ="${build.production.src}"
          destdir           ="${build.production.classes}"
          source            ="1.5"
          debug             ="true"
          includeantruntime ="false"
          encoding          ="UTF-8"
          fork              = "true"
          target            ="1.5">
        <compilerarg value="-J-Duser.language=en"/>
        <include name="**/*.java"/>
        <exclude name="**/${build.production.src.exclude}"/>
        <classpath>
          <path refid="common.classpath"/>
        </classpath>
      </javac>
    </target>

    <target name="cc:instrument" depends="compile">
        <copy todir="${build.test.classes}">
            <fileset dir="${build.test.data}">
                <exclude name="**/*/*swp*"/>
            </fileset>
        </copy>
        <cobertura-instrument
            todir="${build.instrument.classes}"
            datafile="${reports.codeCoverage.data}/metadata.ser">
            <fileset dir="${build.production.classes}"/>
        </cobertura-instrument>
    </target>

    <target name="cc:report"
        depends="cc:instrument, junit:run">
        <cobertura-report
            format   = "html"
            datafile = "${reports.codeCoverage.data}/metadata.ser"
            destdir  = "${reports.codeCoverage.report}"
            srcdir   = "${build.production.src}"/>
    </target>

    <target name="junit:compile" depends="compile">
        <javac
            srcdir            = "${build.test.src}"
            destdir           = "${build.test.classes}"
            debug             = "true"
            includeantruntime ="false"
            encoding          ="UTF-8"
            fork              = "true"
            source            = "1.5"
            target            = "1.5">
            <include name="**/*.java"/>
            <classpath>
                <pathelement location="${build.production.classes}"/>
                <path refid="common.classpath"/>
                <path refid="junit.classpath"/>
                <path refid="jetty.classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="junit:run" depends="junit:compile">
        <tstamp/>
        <copy todir="${build.test.classes}">
            <fileset dir="${build.test.data}">
                <exclude name="**/*/*swp*"/>
            </fileset>
        </copy>
        <replace dir = "${build.test.classes}">
            <include name="**/*.xml"/>
            <replacefilter token="@timestamp@" value="${DSTAMP}${TSTAMP}"/>
        </replace>
        <!--
        It is important to set fork="true" because of the way Cobertura works. 
        It only flushes its changes to the coverage data file to disk when the 
        JVM exits. If JUnit runs in the same JVM as ant, then the coverage data 
        file will be updated AFTER ant exits, but you want to run cobertura-report 
        BEFORE ant exits.
        -->
        <junit printsummary="false"
            forkmode="perBatch"
            fork="true"
            haltonfailure="false">
            <!--
            Specify the name of the coverage data file to use.
            The value specified below is the default.
            -->
            <sysproperty
                key="net.sourceforge.cobertura.datafile"
                file="${reports.codeCoverage.data}/metadata.ser" />
            <!--
            Note the classpath order: instrumented classes are before the
            original (uninstrumented) classes. This is important.
            -->
            <classpath>
                <pathelement location="${build.instrument.classes}"/>
                <pathelement location="${build.test.classes}"/>
                <pathelement location="${build.production.classes}"/>
                <path        refid="cobertura.classpath"/>
                <path        refid="junit.classpath"/>
                <path        refid="jetty.classpath"/>
                <path        refid="common.classpath"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>
            <batchtest fork="yes"   todir="${reports.junit.data}">
                <fileset dir="${build.test.classes}">
                    <include name="**/*Test*.class"/>
                    <exclude name="**/AllTests.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="junit:report" depends="junit:run">
        <junitreport todir="${reports.junit.report}">
            <fileset dir="${reports.junit.data}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.junit.report}"/>
        </junitreport>
    </target>

    <target name="findbugs" depends="compile">
        <findbugs home="${findbugs.home}"
            output="html"
            outputFile="${reports.findbugs.report}/index.htm" >
            <systemProperty name = "findbugs.home"
                value= "${findbugs.home}"/>
            <sourcePath path = "${build.production.src}"/>
            <class  location = "${build.production.classes}"/>
        </findbugs>
    </target>

    <target name="pmd">
        <pmd rulesetfiles="basic,naming,unusedcode,design,imports,junit,strings,braces,codesize,javabeans,coupling,strictexception,controversial"
             targetjdk      = "1.5"
             shortFilenames = "false"
             encoding       = "UTF-8">
            <formatter type = "xml"
                     toFile = "${reports.pmd.data}/${report.pmd.file.name}.xml"/>
            <fileset dir="${build.production.src}">
                <include name="**/*.java"/>
            </fileset>
        </pmd>
        <xslt 
            in    = "${reports.pmd.data}/${report.pmd.file.name}.xml"
            style = "${reports.pmd.config}/pmd-report-per-class.xslt"
            out   = "${reports.pmd.report}/${report.pmd.file.name}.html"/>
    </target>

    <target name="reportall" depends="cc:report,junit:report,findbugs,pmd"/>

    <target name="docs:javadoc">
        <echo>Generating java doc</echo>
        <javadoc
            destdir     = "${docs.javadoc}"
            author      = "true"
            version     = "true"
            use         = "true"
            failonerror = "false"
            encoding    = "UTF-8"
            locale      = "en_US"
            docencoding = "UTF-8">
            <fileset dir="${build.production.src}" defaultexcludes="yes">
                <include name="**"/>
            </fileset>
        </javadoc>

    </target>

    <target name="tags">
        <exec executable="ctags">
            <arg line="--recurse=yes"/>
            <arg line="--links=yes"/>
            <arg line="--java-types=cimp"/>
            <arg line="--fields=+iaS"/>
            <arg line="--totals=yes"/>
            <arg line="./src"/>
            <arg line="./test/src"/>
        </exec>
        <exec executable="find" output="cscope.files">
            <arg line="."/>
            <arg line="-name"/>
            <arg line="'*.java'"/>
        </exec>
        <exec executable="cscope">
            <arg line=" -b -q -i cscope.files"/>
        </exec>
    </target>

    <target name="run" depends="compile">
        <java classname="${c}">
            <classpath>
                <pathelement path = "${build.production.classes}"/>
            </classpath>
        </java>
    </target>

    <target name="assemble" depends="compile">
        <copy todir="${assemble.path}">
            <fileset dir="${assemble.files.path}">
                <exclude name="**/*/*swp*"/>
            </fileset>
        </copy>
        <zip destfile="${assemble.path.lib}/${assemble.package.name}_${assemble.package.version}.zip">
            <fileset dir="${build.production.classes}"/>
        </zip>
    </target>

    <target name="startapp"> 
        <exec executable="net" vmlauncher="false"> 
            <arg value="start"/> 
            <arg value="${application.service.name}"/> 
        </exec> 
    </target> 

    <target name="stopapp"> 
        <exec executable="net" vmlauncher="false"> 
            <arg value="stop"/> 
            <arg value="${application.service.name}"/> 
        </exec> 
        <sleep seconds="10"/>
    </target> 

    <target name="deploy" depends="assemble">
        <!--<antcall target="stopapp"/>-->
        <tstamp/>
        <property name = "filename" value = "${assemble.package.name}_${assemble.package.version}.zip"/>
        <if>
            <equals arg1="${application.deploy.backup}" arg2="true" />
            <then>
                <if>
                    <available file = "${application.server.lib.path}/${filename}"/>
                    <then>
                        <move  file = "${application.server.lib.path}/${filename}"
                             tofile = "${application.server.lib.path}/${assemble.package.name}_${assemble.package.version}.${DSTAMP}${TSTAMP}.zip"
                          overwrite = "true"/>  
                    </then>
                </if>  
                <move     file = "${application.server.path}/Script/wls_920.bat"
                        tofile = "${application.server.path}/Script/wls_920.${DSTAMP}${TSTAMP}.bat"
                     overwrite = "true"/>  
                <move     file = "${application.server.log.file}"
                        tofile = "${application.server.log.file}.${DSTAMP}${TSTAMP}.log"
                     overwrite = "true"/>
            </then>
            <else>
                <delete file = "${application.server.log.file}"/>
            </else>
        </if>
        <copy todir="${application.server.path}">
            <fileset dir="${assemble.path}">
                <exclude name="**/*/*swp*"/>
            </fileset>
        </copy>
        <replace file  = "${application.server.path}/Script/wls_920.bat.merge.sample" 
                 token = "$$PACKAGE_NAME_VERSION.EXT$$" 
                 value = "${filename}"/>
        <move     file = "${application.server.path}/Script/wls_920.bat.merge.sample"
                tofile = "${application.server.path}/Script/wls_920.bat"
             overwrite = "true"/>  
        <!--<antcall target="startapp"/>-->
    </target>

    <target name="clean">
        <delete dir="${target}"/>
    </target>

</project>
